type Category {
    uuid: ID!
    name: String!
    hourlyRate: Float!
    currencyName: String!
    tables: [Table]
}

#------------------------
# Query
#------------------------
extend type Query {
    category(uuid: ID!): CategoryPayload @requireAuth @requirePermissions(permissions: ["category:view"])
    categories(paging: PaginatorInput, params: CategoryFilter): CategoriesPayload! @requireAuth @requirePermissions(permissions: ["category:view"])
}

#------------------------
# Schema mutations
#------------------------
extend type Mutation {
    createCategory(input: CreateCategoryInput!): SaveCategoryPayload @requireAuth @requirePermissions(permissions: ["category:create"])
    updateCategory(input: UpdateCategoryInput!): SaveCategoryPayload @requireAuth @requirePermissions(permissions: ["category:update"])
}

#------------------------
# Query types
#------------------------
input CategoryFilter {
    searchText: String
}
type CategoryPayload {
    data: Category
    errors: [GlobalError]
    status: Boolean
    errorMessage: String
}
type CategoriesPayload {
    list: [Category]
    paging: PaginatorOutputUpdated
}

#------------------------
# Mutations types
#------------------------

input CreateCategoryInput {
    name: String!
    companyId: String!
    hourlyRate: Float!
}

input UpdateCategoryInput {
    uuid: ID!
    companyId: String!
    name: String!
    hourlyRate: Float!
}

type SaveCategoryPayload {
    data: Category
    errors: GlobalError
    status: Boolean
    errorMessage: String
}
