type Category {
    uuid: ID!
    name: String!
    hourlyRate: Float!
    currencyName: String!
    tables: [Table]
    categoryPrices: [CategoryPrice]
}

#------------------------
# Query
#------------------------
extend type Query {
    category(uuid: ID!): CategoryPayload @requireAuth @requirePermissions(permissions: ["category:view"])
    categories(params: CategoryFilter): CategoriesPayload! @requireAuth @requirePermissions(permissions: ["category:view"])
}

#------------------------
# Schema mutations
#------------------------
extend type Mutation {
    saveCategory(input: SaveCategoryInput!): SaveCategoryPayload @requireAuth @requirePermissions(permissions: ["category:upsert"])
}

#------------------------
# Query types
#------------------------
input CategoryFilter {
    companyUuid: ID!
    searchText: String
}
type CategoryPayload {
    data: Category
    errors: [GlobalError]
    status: Boolean
    errorMessage: String
}
type CategoriesPayload {
    list: [Category]
}

#------------------------
# Mutations types
#------------------------

input CategoryPriceInput {
    price: Float!
    unit: CategoryPriceUnit!
    duration: Int!
    freeMins: Int
    currencyName: String
}

input SaveCategoryInput {
    uuid: ID
    companyUuid: ID!
    name: String!
    categoryPrices: [CategoryPriceInput]
}

type SaveCategoryPayload {
    data: Category
    errors: GlobalError
    status: Boolean
    errorMessage: String
}
