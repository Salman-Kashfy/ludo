type Customer {
    uuid: ID!
    firstName: String!
    lastName: String!
    fullName: String!
    phoneCode: String
    phoneNumber: String
    phone: String
    createdAt: String!
    updatedAt: String!
}

extend type Query {
    customer(uuid: ID!): CustomerPayload @requireAuth @requirePermissions(permissions: ["customer:view"])
    customers(paging: PaginatorInput, params: CustomerFilter): CustomersPayload! @requireAuth @requirePermissions(permissions: ["customer:view"])
}

extend type Mutation {
    createCustomer(input: CreateCustomerInput!): SaveCustomerPayload @requireAuth @requirePermissions(permissions: ["customer:create"])
    updateCustomer(input: UpdateCustomerInput!): SaveCustomerPayload @requireAuth @requirePermissions(permissions: ["customer:update"])
    deleteCustomer(uuid: ID!): DeleteCustomerPayload @requireAuth @requirePermissions(permissions: ["customer:delete"])
}

input CustomerFilter {
    searchText: String
}

type CustomerPayload {
    data: Customer
    errors: [GlobalError]
    status: Boolean
    errorMessage: String
}

type CustomersPayload {
    list: [Customer]
    paging: PaginatorOutputUpdated
}

input CreateCustomerInput {
    firstName: String!
    lastName: String!
    phoneCode: String
    phoneNumber: String
}

input UpdateCustomerInput {
    uuid: ID!
    firstName: String!
    lastName: String!
    phoneCode: String
    phoneNumber: String
}

type SaveCustomerPayload {
    data: Customer
    errors: GlobalError
    status: Boolean
    errorMessage: String
}

type DeleteCustomerPayload {
    status: Boolean
    errors: GlobalError
    errorMessage: String
}
