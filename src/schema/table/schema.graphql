type Table {
    uuid: ID!
    name: String!
    categoryUuid: ID!
    status: Status!
    sortNo: Int
    category: Category!
    tableSessions: [TableSession]
}

#------------------------
# Query
#------------------------
extend type Query {
    table(uuid: ID!): TablePayload @requireAuth @requirePermissions(permissions: ["table:view"])
    tables(params: TableFilter): TablesPayload! @requireAuth @requirePermissions(permissions: ["table:view"])
}

#------------------------
# Schema mutations
#------------------------
extend type Mutation {
    saveTable(input: SaveTableInput!): SaveTablePayload @requireAuth @requirePermissions(permissions: ["table:upsert"])
    deleteTable(uuid: ID!): DeleteTablePayload @requireAuth @requirePermissions(permissions: ["table:delete"])
}

#------------------------
# Query types
#------------------------
input TableFilter {
    searchText: String
    companyUuid: ID!
    categoryUuid: ID
    status: Status
}
type TablePayload {
    data: Table
    errors: [GlobalError]
    status: Boolean
    errorMessage: String
}
type TablesPayload {
    data: [Table]
    errors: [GlobalError]
    status: Boolean
    errorMessage: String
}

#------------------------
# Mutations types
#------------------------

input SaveTableInput {
    uuid: ID
    name: String!
    categoryUuid: ID!
    status: Status
    companyUuid: ID!
    sortNo: Int
}

type SaveTablePayload {
    data: Table
    errors: GlobalError
    status: Boolean
    errorMessage: String
}

type DeleteTablePayload {
    data: Boolean
    errors: GlobalError
    status: Boolean
    errorMessage: String
}